# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.python':

  'Single input':
    'prefix': 'inp'
    'body': '${1:A} = input()$2'

  'Multiple input':
    'prefix': 'minp'
    'body': '${1:A}, ${2:B} = input().split()$3'

  'Multiple sequential input':
    'prefix': 'msinp'
    'body': '${1:A} = [input() for _ in range(${2:N})]$3'

  'Multiple input list':
    'prefix': 'linp'
    'body': '${1:A} = list(input().split())$3'

  'Single integer input':
    'prefix': 'iinp'
    'body': '${1:N} = int(input())$2'

  'Multiple sequential integer input':
    'prefix': 'msiinp'
    'body': '${1:A} = [int(input()) for _ in range(${2:N})]$3'

  'Multiple integer input':
    'prefix': 'miinp'
    'body': '${1:A}, ${2:B} = map(int, input().split())$3'

  'Multiple integer input list':
    'prefix': 'liinp'
    'body': '${1:A} = list(map(int, input().split()))$2'

  'Set Recursion Limit':
    'prefix': 'srl'
    'body': """
    import sys
    sys.setrecursionlimit(10 ** 7)
    """

  'lcm':
    'prefix': 'lcm'
    'body': """
    def lcm(x, y):
        import math
        return (x * y) // math.gcd(x, y)
    """

  'modpower':
    'prefix': 'modpow'
    'body': """
    def modpow(a, b, mod = 10 ** 9 + 7):
        ret = 1
        while b > 0:
            if b % 2 == 1:
                ret = ret * a % mod
            a = a * a % mod
            b //= 2
        return ret
    """

  'modcomb':
    'prefix': 'modcomb'
    'body': """
    def modcomb(n, c, mod=10 ** 9 + 7):
        if c > n - c:
            c = n - c
        u, d = 1, 1
        for i in range(c):
            u = u * (n - i) % mod
            d = d * (i + 1) % mod
        return u * modpow(d, mod - 2) % mod
    """

  'FastModComb':
    'prefix': 'fastmodcomb'
    'body': """
    class FastModComb:
        def __init__(self, n, mod=10 ** 9 + 7):
            f, self.mod = [1], mod
            for i in range(1, n + 1):
                f.append(f[-1] * i % mod)
            rf = [self.modpow(f[-1], mod - 2)]
            for i in range(1, n + 1):
                rf.append(rf[-1] * (n - i + 1) % mod)
            self.f, self.rf = f, list(reversed(rf))

        def modpow(self, a, b):
            ret = 1
            while b > 0:
                if b % 2 == 1:
                    ret = ret * a % self.mod
                a = a * a % self.mod
                b //= 2
            return ret

        def modcomb(self, n, c):
            return self.f[n] * self.rf[c] * self.rf[n - c] % self.mod
    """

  'Sieve of Eratosthenes':
    'prefix': 'primes'
    'body': """
    def primes(N):
        p = [False, False] + [True] * (N - 1)
        for i in range(2, int(N ** 0.5) + 1):
            if p[i]:
                for j in range(i * 2, N + 1, i):
                    p[j] = False
        return [i for i in range(N + 1) if p[i]]
    """

  'Prime factors':
    'prefix': 'prime_factors'
    'body': """
    def prime_factors(N):
        ret = []
        for p in primes(int(N ** 0.5) + 1):
            while N % p == 0:
                ret.append(p)
                N //= p
        if N > 1:
            ret.append(N)
        return ret
    """

  'Divisor':
    'prefix': 'divisor'
    'body': """
    def divisor(N):
        div = []
        for i in range(1, int(N ** 0.5 + 1)):
            if N % i == 0:
                div.append(i)
                if i * i != N:
                    div.append(N // i)
        return sorted(div)
    """

  'Dijkstra':
    'prefix': 'Dij'
    'body': """
    def dijkstra(v, G):
        '''
        v: integer
        G: 2-d Array ([from][#edge] -> (to, length))
        ret: 1-d Array (Minimum path from v)
        '''
        import heapq

        ret = [10 ** 10] * len(G)
        ret[v] = 0
        q = [(ret[i], i) for i in range(len(G))]
        heapq.heapify(q)

        while len(q):
            tmpr, u = heapq.heappop(q)
            if tmpr == ret[u]:
                for w, l in G[u]:
                    if ret[w] > ret[u] + l:
                        ret[w] = ret[u] + l
                        heapq.heappush(q, (ret[w], w))
        return ret
    """

  'Warshallâ€“Floyd':
    'prefix': 'wf'
    'body': """
    def warshall_floyd(G):
        '''
        G: N * N Array (Adjacency matrix)
        ret: N * N Array (Minimum path)
        '''
        import copy
        ret = copy.deepcopy(G)
        for k in range(N):
            for i in range(N):
                for j in range(N):
                    ret[i][j] = min(ret[i][j], ret[i][k] + ret[k][j])
        return ret
    """

  'Bellman-Ford':
    'prefix': 'bf'
    'body': """
    def bellman_ford(v, G):
        '''
        v: integer
        G: 2-d Array ([from][#edge] -> (to, length))
        ret: 1-d Array (Minimum path from v)
        '''
        INF = 10 ** 10
        ret = [INF] * len(G)
        ret[v] = 0

        for _ in range(len(G) - 1):
            for u, g in enumerate(G):
                for w, l in g:
                    if not ret[u] == INF and ret[w] > ret[u] + l:
                        ret[w] = ret[u] + l

        for u, g in enumerate(G):
            for w, l in g:
                if not ret[u] == INF and ret[w] > ret[u] + l:
                    print("A negative-weight cycle: rly={}, dst={}".format(u, w))

        return ret
    """

  'Edmonds-Karp':
    'prefix': 'ek'
    'body': """
    def edmonds_karp(s, t, C):
        '''
        s, t: start, target (integer)
        C: Array of dict ([from][to] -> length)
        ret: maximum_flow (integer)
        '''
        import copy
        import collections

        r = copy.deepcopy(c)  # Residual network
        maxf = 0

        while True:
            q, found = collections.deque(), False
            q.append(([S], 10 ** 15))
            while len(q) > 0 and not found:
                p, minf = q.popleft()
                for to, flow in r[p[-1]].items():
                    if flow == 0:
                        continue
                    elif to == T:
                        p, minf = p + [to], min(flow, minf)
                        found = True
                        break
                    elif not to in p:
                        q.append((p + [to], min(flow, minf)))

            if not found:
                break

            for i in range(len(p) - 1):
                r[p[i]][p[i + 1]] -= minf
                if p[i] in r[p[i + 1]]:
                    r[p[i + 1]][p[i]] += minf
                else:
                    r[p[i + 1]][p[i]] = minf
            maxf += minf

        return maxf
    """

  'class UnionFind':
    'prefix': 'unionfind'
    'body': """
    class UnionFind:

        def __init__(self, n):
            # p[x] < 0 means x is root and abs(p[x]) == size[x]
            self.p, self.d = [-1] * n, [0] * n  # Parent, Depth

        def find(self, x):
            if self.p[x] < 0:
                return x
            else:
                self.p[x] = self.find(self.p[x])
                return self.p[x]

        def isSame(self, x, y):
            return self.find(x) == self.find(y)

        def unite(self, x, y):
            if self.isSame(x, y):
                return
            x, y = self.find(x), self.find(y)

            if self.d[x] > self.d[y]:
                self.p[x] += self.p[y]
                self.p[y] = x
            else:
                self.p[y] += self.p[x]
                self.p[x] = y
                if self.d[x] == self.d[y]:
                    self.d[y] += 1

        def size(self, x):
            return - self.p[self.find(x)]

        def numTree(self):
            return sum([1 for p in self.p if p < 0])
    """
